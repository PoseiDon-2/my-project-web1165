"use client";

import { useState } from "react";
import { X, MapPin, Check, Truck } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { pointsSystem } from "@/lib/points-system";
import { receiptSystem } from "@/lib/receipt-system";
import { useAuth } from "@/components/auth-context";
import { toast } from "@/components/ui/use-toast";
import { useRouter } from "next/navigation";

interface ItemsDonationModalProps {
  isOpen: boolean;
  onClose: () => void;
  donation: {
    id: string; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å number ‡πÄ‡∏õ‡πá‡∏ô string
    title: string;
    itemsNeeded: string;
    contactPhone: string;
    address: string;
  };
}

type DeliveryMethod = "send-to-address" | "drop-off";

export default function ItemsDonationModal({ isOpen, onClose, donation }: ItemsDonationModalProps) {
  const [step, setStep] = useState<"delivery" | "success">("delivery");
  const [deliveryMethod, setDeliveryMethod] = useState<DeliveryMethod>("send-to-address");
  const [deliveryDate, setDeliveryDate] = useState("");
  const [deliveryTime, setDeliveryTime] = useState("");
  const [donorName, setDonorName] = useState("");
  const [donorPhone, setDonorPhone] = useState("");
  const [donorEmail, setDonorEmail] = useState("");
  const [message, setMessage] = useState("");
  const [isAnonymous, setIsAnonymous] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [trackingNumber, setTrackingNumber] = useState("");
  const [pointsEarned, setPointsEarned] = useState(0);
  const router = useRouter();
  const { user } = useAuth();

  const handleSubmit = async () => {
    if (!user) {
      toast({ title: "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ" });
      return;
    }

    setIsSubmitting(true);

    try {
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á
      const earnedPoints = pointsSystem.calculateDonationPoints(1, "item");
      await pointsSystem.addPoints(
        user.id,
        "donation",
        earnedPoints,
        `Item donation to ${donation.title} (${donation.itemsNeeded})`,
        donation.id
      );
      setPointsEarned(earnedPoints);

      const receipt = receiptSystem.createReceipt({
        donationId: `donation_${Date.now()}`,
        requestId: donation.id,
        requestTitle: donation.title,
        donorId: user.id,
        donorName: isAnonymous ? undefined : donorName || `${user.firstName} ${user.lastName}`,
        type: "items",
        items: [{ name: donation.itemsNeeded, quantity: 1 }],
        deliveryMethod,
        trackingNumber: trackingNumber || undefined,
        message,
        isAnonymous,
        pointsEarned: earnedPoints,
        attachments: undefined,
      });

      try {
        const existingDonations = JSON.parse(localStorage.getItem(`user_donations_${user.id}`) || "[]");
        const donationRecord = {
          id: receipt.donationId,
          userId: user.id,
          requestId: donation.id,
          requestTitle: donation.title,
          type: "items" as const,
          date: new Date().toISOString(),
          status: "pending" as const,
          deliveryMethod,
          deliveryDate,
          deliveryTime,
          trackingNumber: trackingNumber || undefined,
          items: [{ name: donation.itemsNeeded, quantity: 1, status: "pending" }],
          pointsEarned: earnedPoints,
        };
        existingDonations.push(donationRecord);
        localStorage.setItem(`user_donations_${user.id}`, JSON.stringify(existingDonations));

        const userData = JSON.parse(localStorage.getItem("users") || "[]");
        const userIndex = userData.findIndex((u: any) => u.id === user.id);
        if (userIndex !== -1) {
          userData[userIndex].donationCount = (userData[userIndex].donationCount || 0) + 1;
          localStorage.setItem("users", JSON.stringify(userData));
        }
      } catch (error) {
        console.warn("LocalStorage unavailable:", error);
      }

      toast({
        title: `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${earnedPoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô!`,
        description: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á",
      });

      setIsSubmitting(false);
      setStep("success");
    } catch (error) {
      console.error("Failed to process donation:", error);
      toast({ title: "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÑ‡∏î‡πâ" });
      setIsSubmitting(false);
    }
  };

  const resetModal = () => {
    setStep("delivery");
    setDeliveryMethod("send-to-address");
    setDeliveryDate("");
    setDeliveryTime("");
    setDonorName("");
    setDonorPhone("");
    setDonorEmail("");
    setMessage("");
    setIsAnonymous(false);
    setIsSubmitting(false);
    setTrackingNumber("");
    setPointsEarned(0);
  };

  const handleClose = () => {
    resetModal();
    onClose();
  };

  const getDeliveryMethodText = (method: DeliveryMethod) => {
    const methods = {
      "send-to-address": "‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
      "drop-off": "‡∏ô‡∏≥‡πÑ‡∏õ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà",
    };
    return methods[method];
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-lg max-h-[90vh] overflow-y-auto">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4">
          <div className="flex items-center gap-2">
            <CardTitle className="text-lg">
              {step === "delivery" && "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á"}
              {step === "success" && "‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}
            </CardTitle>
          </div>
          <Button variant="ghost" size="sm" onClick={handleClose}>
            <X className="w-4 h-4" />
          </Button>
        </CardHeader>

        <CardContent className="space-y-4">
          {step === "delivery" && (
            <div className="space-y-4">
              <div>
                <h3 className="font-medium text-gray-800 mb-2">‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡πâ</h3>
                <p className="text-sm text-gray-600 line-clamp-2">{donation.title}</p>
              </div>

              <div className="space-y-3">
                <h4 className="font-medium text-gray-800">‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h4>
                <div className="p-3 bg-blue-50 rounded-lg">
                  <p className="text-sm text-blue-800">{donation.itemsNeeded}</p>
                  <p className="text-xs text-blue-600 mt-1">
                    üí° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö
                  </p>
                </div>
              </div>

              <div className="space-y-3">
                <h4 className="font-medium text-gray-800">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö</h4>
                <div className="space-y-2">
                  <button
                    className={`w-full p-4 border rounded-lg text-left transition-all ${
                      deliveryMethod === "send-to-address" ? "border-blue-500 bg-blue-50" : "border-gray-200 hover:border-gray-300"
                    }`}
                    onClick={() => setDeliveryMethod("send-to-address")}
                  >
                    <div className="flex items-center gap-3">
                      <Truck className="w-6 h-6 text-blue-600" />
                      <div>
                        <div className="font-medium">‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</div>
                        <div className="text-sm text-gray-600">‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö</div>
                      </div>
                    </div>
                  </button>

                  <button
                    className={`w-full p-4 border rounded-lg text-left transition-all ${
                      deliveryMethod === "drop-off" ? "border-green-500 bg-green-50" : "border-gray-200 hover:border-gray-300"
                    }`}
                    onClick={() => setDeliveryMethod("drop-off")}
                  >
                    <div className="flex items-center gap-3">
                      <MapPin className="w-6 h-6 text-green-600" />
                      <div>
                        <div className="font-medium">‡∏ô‡∏≥‡πÑ‡∏õ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà</div>
                        <div className="text-sm text-gray-600">‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ</div>
                      </div>
                    </div>
                  </button>
                </div>
              </div>

              <div className="space-y-3">
                <h4 className="font-medium text-gray-800">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö</h4>
                <div className="grid grid-cols-2 gap-3">
                  <div className="space-y-2">
                    <Label htmlFor="deliveryDate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà *</Label>
                    <Input
                      id="deliveryDate"
                      type="date"
                      value={deliveryDate}
                      onChange={(e) => setDeliveryDate(e.target.value)}
                      min={new Date().toISOString().split("T")[0]}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="deliveryTime">‡πÄ‡∏ß‡∏•‡∏≤ *</Label>
                    <Select value={deliveryTime} onValueChange={setDeliveryTime}>
                      <SelectTrigger>
                        <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="morning">‡πÄ‡∏ä‡πâ‡∏≤ (09:00-12:00)</SelectItem>
                        <SelectItem value="afternoon">‡∏ö‡πà‡∏≤‡∏¢ (13:00-17:00)</SelectItem>
                        <SelectItem value="evening">‡πÄ‡∏¢‡πá‡∏ô (17:00-20:00)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="space-y-3">
                  <div className="p-4 bg-green-50 rounded-lg">
                    <h5 className="font-medium text-green-800 mb-2">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á</h5>
                    <div className="text-sm text-green-700">
                      <p className="font-medium">{donation.address}</p>
                      <p>‡πÇ‡∏ó‡∏£: {donation.contactPhone}</p>
                    </div>
                  </div>

                  {deliveryMethod === "send-to-address" && (
                    <div className="space-y-2">
                      <Label htmlFor="trackingNumber">‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏/‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß)</Label>
                      <Input
                        id="trackingNumber"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô TH1234567890 ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ç‡∏ô‡∏™‡πà‡∏á"
                        value={trackingNumber}
                        onChange={(e) => setTrackingNumber(e.target.value)}
                      />
                      <p className="text-xs text-gray-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏î‡πâ</p>
                    </div>
                  )}
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="message">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</Label>
                <Textarea
                  id="message"
                  placeholder="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
                  rows={3}
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                />
              </div>

              <div className="space-y-3">
                <h4 className="font-medium text-gray-800">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ</h4>
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <Checkbox
                      id="anonymous"
                      checked={isAnonymous}
                      onCheckedChange={(checked) => {
                        setIsAnonymous(checked === true);
                      }}
                    />
                    <Label htmlFor="anonymous" className="text-sm">‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠</Label>
                  </div>

                  {!isAnonymous && (
                    <>
                      <div className="space-y-2">
                        <Label htmlFor="donorName">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</Label>
                        <Input
                          id="donorName"
                          placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                          value={donorName}
                          onChange={(e) => setDonorName(e.target.value)}
                          required
                        />
                      </div>
                      <div className="grid grid-cols-2 gap-3">
                        <div className="space-y-2">
                          <Label htmlFor="donorPhone">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ *</Label>
                          <Input
                            id="donorPhone"
                            type="tel"
                            placeholder="081-234-5678"
                            value={donorPhone}
                            onChange={(e) => setDonorPhone(e.target.value)}
                            required
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="donorEmail">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</Label>
                          <Input
                            id="donorEmail"
                            type="email"
                            placeholder="example@email.com"
                            value={donorEmail}
                            onChange={(e) => setDonorEmail(e.target.value)}
                          />
                        </div>
                      </div>
                    </>
                  )}
                </div>
              </div>

              <div className="p-3 bg-gray-50 rounded-lg">
                <h5 className="font-medium text-gray-800 mb-2">‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ</h5>
                <div className="space-y-1 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö:</span>
                    <span>{getDeliveryMethodText(deliveryMethod)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span>
                    <span>{deliveryDate || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</span>
                  </div>
                </div>
              </div>

              <Button
                className="w-full bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600"
                onClick={handleSubmit}
                disabled={isSubmitting || !deliveryDate || !deliveryTime || (!isAnonymous && (!donorName || !donorPhone))}
              >
                {isSubmitting ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
                  </>
                ) : (
                  "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ"
                )}
              </Button>
            </div>
          )}

          {step === "success" && (
            <div className="space-y-4 text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto">
                <Check className="w-8 h-8 text-green-600" />
              </div>

              <div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
                <p className="text-gray-600">‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏à‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
              </div>

              {pointsEarned > 0 && (
                <div className="p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                  <div className="flex items-center justify-center gap-2 mb-2">
                    <span className="text-2xl">ü™ô</span>
                    <span className="text-xl font-bold text-yellow-700">+{pointsEarned} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô!</span>
                  </div>
                  <p className="text-sm text-yellow-600">‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ</p>
                </div>
              )}

              <div className="p-4 bg-gray-50 rounded-lg space-y-2 text-left">
                <div className="flex justify-between">
                  <span className="text-sm text-gray-600">‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö:</span>
                  <span className="text-sm">{getDeliveryMethodText(deliveryMethod)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-gray-600">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:</span>
                  <span className="text-sm">{deliveryDate}</span>
                </div>
                {pointsEarned > 0 && (
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:</span>
                    <span className="text-sm font-medium text-yellow-600">+{pointsEarned} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</span>
                  </div>
                )}
                {!isAnonymous && (
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ:</span>
                    <span className="text-sm">{donorName}</span>
                  </div>
                )}
                {deliveryMethod === "send-to-address" && trackingNumber && (
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏:</span>
                    <span className="text-sm font-mono">{trackingNumber}</span>
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <Button
                  className="w-full bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600"
                  onClick={handleClose}
                >
                  ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                </Button>
                {pointsEarned > 0 && (
                  <Button
                    variant="outline"
                    className="w-full bg-transparent"
                    onClick={() => {
                      handleClose();
                      router.push("/rewards");
                    }}
                  >
                    üéÅ ‡πÑ‡∏õ‡∏î‡∏π‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏Å‡πÑ‡∏î‡πâ
                  </Button>
                )}
                <Button variant="outline" className="w-full bg-transparent">
                  ‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ
                </Button>
              </div>

              <div className="bg-blue-50 p-3 rounded-lg">
                <p className="text-sm text-blue-800">
                  üìû ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                  <br />üìß ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
                </p>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}