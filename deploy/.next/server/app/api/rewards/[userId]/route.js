"use strict";(()=>{var e={};e.id=7620,e.ids=[7620],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},23360:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>w,patchFetch:()=>m,requestAsyncStorage:()=>l,routeModule:()=>c,serverHooks:()=>x,staticGenerationAsyncStorage:()=>h});var s={};t.r(s),t.d(s,{GET:()=>p});var a=t(49303),o=t(88716),n=t(60670),i=t(53524),u=t(87070);let d=new i.PrismaClient;async function p(e,{params:r}){let{userId:t}=r,s=e.headers.get("Authorization")?.replace("Bearer ","");if(!t)return u.NextResponse.json({error:"userId is required"},{status:400});if(!s)return u.NextResponse.json({error:"Authentication token required"},{status:401});try{let e=await d.reward.findMany({where:{userId:t},orderBy:{createdAt:"desc"}});return u.NextResponse.json(e)}catch(e){return console.error("Error fetching rewards:",e),u.NextResponse.json({error:"Failed to fetch rewards"},{status:500})}}let c=new a.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/rewards/[userId]/route",pathname:"/api/rewards/[userId]",filename:"route",bundlePath:"app/api/rewards/[userId]/route"},resolvedPagePath:"D:\\testProject\\test-project\\app\\api\\rewards\\[userId]\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:l,staticGenerationAsyncStorage:h,serverHooks:x}=c,w="/api/rewards/[userId]/route";function m(){return(0,n.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:h})}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[9276,5972],()=>t(23360));module.exports=s})();