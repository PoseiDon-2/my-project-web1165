"use strict";(()=>{var e={};e.id=1227,e.ids=[1227],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},34542:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>m,patchFetch:()=>f,requestAsyncStorage:()=>l,routeModule:()=>c,serverHooks:()=>x,staticGenerationAsyncStorage:()=>h});var s={};r.r(s),r.d(s,{GET:()=>d});var n=r(49303),o=r(88716),i=r(60670),a=r(53524),u=r(87070);let p=new a.PrismaClient;async function d(e,{params:t}){let{userId:r}=t,s=e.headers.get("Authorization")?.replace("Bearer ","");if(!r)return u.NextResponse.json({error:"userId is required"},{status:400});if(!s)return u.NextResponse.json({error:"Authentication token required"},{status:401});try{let e=await p.pointstransaction.findMany({where:{userId:r},orderBy:{date:"desc"}});return u.NextResponse.json(e)}catch(e){return console.error("Error fetching transactions:",e),u.NextResponse.json({error:"Failed to fetch transactions"},{status:500})}finally{await p.$disconnect()}}let c=new n.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/points/[userId]/route",pathname:"/api/points/[userId]",filename:"route",bundlePath:"app/api/points/[userId]/route"},resolvedPagePath:"D:\\testProject\\test-project\\app\\api\\points\\[userId]\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:l,staticGenerationAsyncStorage:h,serverHooks:x}=c,m="/api/points/[userId]/route";function f(){return(0,i.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:h})}}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[9276,5972],()=>r(34542));module.exports=s})();