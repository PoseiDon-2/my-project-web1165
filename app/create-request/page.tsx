"use client";

import type React from "react";
import { useState, useRef, useEffect } from "react";
import { useRouter } from "next/navigation";
import { ArrowLeft, Upload, MapPin, Phone, CreditCard, Save, Eye, Building, CheckCircle2, Circle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useAuth } from "../../components/auth-context";

interface Category {
  id: string;
  value: string;
  label: string;
  icon: string;
}

interface CreateRequestData {
  title: string;
  description: string;
  category: string;
  donationType: string[];
  goalAmount?: number;
  goalItems?: string;
  goalVolunteers?: number;
  volunteerDetails?: string;
  volunteerDuration?: string;
  location: string;
  detailedAddress: string;
  contactPhone: string;
  bankAccount: {
    bank: string;
    accountNumber: string;
    accountName: string;
  };
  organizationDetails: {
    organizationType: string;
    registrationNumber: string;
    taxId: string;
  };
  image?: File;
  urgency?: string;
}

const organizationTypes = [
  { value: "NGO", label: "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏ß‡∏á‡∏´‡∏≤‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£", icon: "üåü" },
  { value: "CHARITY", label: "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏∏‡∏®‡∏•", icon: "ü§ù" },
  { value: "FOUNDATION", label: "‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ò‡∏¥", icon: "üèõÔ∏è" },
  { value: "GOVERNMENT", label: "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", icon: "üèõÔ∏è" },
  { value: "TEMPLE", label: "‡∏ß‡∏±‡∏î/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", icon: "üôè" },
  { value: "OTHER", label: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)", icon: "üè´" },
];

const donationTypes = [
  {
    value: "money",
    label: "‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ",
    icon: "üí∞",
    description: "‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
    color: "bg-green-100 text-green-700 border-green-200",
    examples: ["‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡∏Ñ‡πà‡∏≤‡∏¢‡∏≤", "‡∏Ñ‡πà‡∏≤‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°", "‡∏Ñ‡πà‡∏≤‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"],
  },
  {
    value: "items",
    label: "‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á",
    icon: "üì¶",
    description: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå, ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ, ‡∏≠‡∏≤‡∏´‡∏≤‡∏£, ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
    color: "bg-blue-100 text-blue-700 border-blue-200",
    examples: ["‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏´‡πâ‡∏á", "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤"],
  },
  {
    value: "volunteer",
    label: "‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô/‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£",
    icon: "ü§ù",
    description: "‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£, ‡πÅ‡∏£‡∏á‡∏Ñ‡∏ô, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ",
    color: "bg-purple-100 text-purple-700 border-purple-200",
    examples: ["‡∏ä‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏™‡∏≠‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", "‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"],
  },
];

export default function CreateRequest() {
  const router = useRouter();
  const { user } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState(false);
  const [categories, setCategories] = useState<Category[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [formData, setFormData] = useState<CreateRequestData>({
    title: "",
    description: "",
    category: "",
    donationType: [],
    goalAmount: undefined,
    goalItems: "",
    goalVolunteers: undefined,
    volunteerDetails: "",
    volunteerDuration: "",
    location: "",
    detailedAddress: "",
    contactPhone: user?.phone || "",
    bankAccount: {
      bank: "",
      accountNumber: "",
      accountName: "",
    },
    organizationDetails: {
      organizationType: "",
      registrationNumber: "",
      taxId: "",
    },
    urgency: "MEDIUM",
  });

  useEffect(() => {
    if (!user || user.role !== "ORGANIZER") {
      router.push("/");
      return;
    }

    const fetchCategories = async () => {
      try {
        console.log("Fetching categories...");
        const response = await fetch("/api/categories");
        console.log("Response status:", response.status);
        if (response.ok) {
          const data = await response.json();
          console.log("Categories data:", data);
          setCategories(
            data.map((cat: { id: string; name: string }) => ({
              id: cat.id,
              value: cat.name,
              label: {
                disaster: "‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥",
                medical: "‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå",
                education: "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
                animal: "‡∏™‡∏±‡∏ï‡∏ß‡πå",
                environment: "‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°",
                elderly: "‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏",
                children: "‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏¢‡∏≤‡∏ß‡∏ä‡∏ô",
                disability: "‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£",
                community: "‡∏ä‡∏∏‡∏°‡∏ä‡∏ô",
                religion: "‡∏®‡∏≤‡∏™‡∏ô‡∏≤",
              }[cat.name.toLowerCase()] || cat.name,
              icon: {
                disaster: "üåä",
                medical: "üè•",
                education: "üìö",
                animal: "üêï",
                environment: "üå±",
                elderly: "üë¥",
                children: "üë∂",
                disability: "‚ôø",
                community: "üèòÔ∏è",
                religion: "üôè",
              }[cat.name.toLowerCase()] || "üìç",
            }))
          );
        } else {
          console.error("Failed to fetch categories:", response.statusText);
          setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ");
          setCategories([
            { id: "1", value: "education", label: "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤", icon: "üìö" },
            { id: "2", value: "medical", label: "‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå", icon: "üè•" },
            { id: "3", value: "disaster", label: "‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥", icon: "üåä" },
          ]);
        }
      } catch (error) {
        console.error("Error fetching categories:", error);
        setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà");
        setCategories([
          { id: "1", value: "education", label: "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤", icon: "üìö" },
          { id: "2", value: "medical", label: "‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå", icon: "üè•" },
          { id: "3", value: "disaster", label: "‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥", icon: "üåä" },
        ]);
      }
    };
    fetchCategories();
  }, [user, router]);

  if (!user || user.role !== "ORGANIZER") {
    return null;
  }

  const handleInputChange = (field: string, value: string | number) => {
    console.log(`Field: ${field}, Value: ${value}`);
    if (field.startsWith("bankAccount.")) {
      const bankField = field.split(".")[1];
      setFormData({
        ...formData,
        bankAccount: {
          ...formData.bankAccount,
          [bankField]: value,
        },
      });
    } else if (field.startsWith("organizationDetails.")) {
      const orgField = field.split(".")[1];
      setFormData({
        ...formData,
        organizationDetails: {
          ...formData.organizationDetails,
          [orgField]: value,
        },
      });
    } else {
      setFormData({
        ...formData,
        [field]: value,
      });
    }
  };

  const handleDonationTypeToggle = (type: string) => {
    const newTypes = formData.donationType.includes(type)
      ? formData.donationType.filter((t) => t !== type)
      : [...formData.donationType, type];
    setFormData({
      ...formData,
      donationType: newTypes,
    });
  };

  const handleSelectAllDonationTypes = () => {
    const allTypes = donationTypes.map((type) => type.value);
    setFormData({
      ...formData,
      donationType: allTypes,
    });
  };

  const handleClearAllDonationTypes = () => {
    setFormData({
      ...formData,
      donationType: [],
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsSubmitting(true);

    if (categories.length === 0) {
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
      setIsSubmitting(false);
      return;
    }

    if (!formData.title || !formData.description || !formData.category || formData.donationType.length === 0) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      setIsSubmitting(false);
      return;
    }

    if (!categories.find(c => c.value === formData.category)) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      setIsSubmitting(false);
      return;
    }

    if (!organizationTypes.map(t => t.value).includes(formData.organizationDetails.organizationType)) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      setIsSubmitting(false);
      return;
    }

    if (formData.donationType.includes("money")) {
      if (!formData.goalAmount || formData.goalAmount < 1000) {
        setError("‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏°‡∏ó‡∏∏‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1,000 ‡∏ö‡∏≤‡∏ó");
        setIsSubmitting(false);
        return;
      }
      if (!formData.bankAccount.bank || !formData.bankAccount.accountNumber || !formData.bankAccount.accountName) {
        setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
        setIsSubmitting(false);
        return;
      }
    }

    if (formData.donationType.includes("items") && !formData.goalItems) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î");
      setIsSubmitting(false);
      return;
    }

    if (formData.donationType.includes("volunteer")) {
      if (!formData.goalVolunteers || formData.goalVolunteers < 1) {
        setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£");
        setIsSubmitting(false);
        return;
      }
      if (!formData.volunteerDetails) {
        setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£");
        setIsSubmitting(false);
        return;
      }
      if (!formData.volunteerDuration) {
        setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£");
        setIsSubmitting(false);
        return;
      }
    }

    if (!formData.organizationDetails.organizationType || !formData.organizationDetails.registrationNumber) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      setIsSubmitting(false);
      return;
    }

    let imageUrl: string | undefined;
    if (formData.image) {
      try {
        const formDataUpload = new FormData();
        formDataUpload.append("file", formData.image);
        const response = await fetch("/api/upload-image", {
          method: "POST",
          body: formDataUpload,
        });
        const responseData = await response.json();
        console.log("Image upload response:", responseData);
        if (!response.ok) {
          throw new Error(responseData.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ");
        }
        imageUrl = responseData.url;
      } catch (error: any) {
        console.error("Image Upload Error:", error);
        setError(error.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ");
        setIsSubmitting(false);
        return;
      }
    }

    const requestData = {
      title: formData.title,
      description: formData.description,
      categoryId: categories.find(c => c.value === formData.category)?.id || formData.category,
      location: formData.location || null,
      urgency: formData.urgency || "MEDIUM",
      acceptsMoney: formData.donationType.includes("money"),
      acceptsItems: formData.donationType.includes("items"),
      acceptsVolunteer: formData.donationType.includes("volunteer"),
      targetAmount: formData.goalAmount ? Number(formData.goalAmount) : undefined,
      itemsNeeded: formData.goalItems ? formData.goalItems.split(",").map(item => item.trim()).filter(item => item) : [],
      volunteersNeeded: formData.goalVolunteers ? Number(formData.goalVolunteers) : 0,
      volunteerSkills: formData.volunteerDetails ? formData.volunteerDetails.split(",").map(skill => skill.trim()).filter(skill => skill) : [],
      volunteerDuration: formData.volunteerDuration || null,
      images: imageUrl ? [imageUrl] : [],
      documents: {
        detailedAddress: formData.detailedAddress || null,
        contactPhone: formData.contactPhone || null,
        bankAccount: formData.donationType.includes("money") ? {
          bank: formData.bankAccount.bank,
          accountNumber: formData.bankAccount.accountNumber,
          accountName: formData.bankAccount.accountName,
        } : undefined,
        organizationDetails: {
          organizationType: formData.organizationDetails.organizationType === "school" ? "OTHER" : formData.organizationDetails.organizationType,
          registrationNumber: formData.organizationDetails.registrationNumber,
          taxId: formData.organizationDetails.taxId || null,
        },
      },
      status: process.env.NEXT_PUBLIC_AUTO_APPROVE === 'true' ? 'APPROVED' : 'PENDING',
      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
    };

    console.log("Request Data:", JSON.stringify(requestData, null, 2));

    try {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠");
        setIsSubmitting(false);
        return;
      }

      const response = await fetch("/api/donation-requests", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(requestData),
      });

      const responseData = await response.json();
      console.log("API Response:", responseData);
      if (!response.ok) {
        console.error("API Error Details:", responseData);
        if (responseData.details) {
          const errorMessages = responseData.details
            .map((e: any) => e.message)
            .join(", ");
          throw new Error(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${errorMessages}`);
        }
        if (responseData.error.includes("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")) {
          setError("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà");
        } else {
          throw new Error(responseData.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠");
        }
      }
      console.log("Created request ID:", responseData.id);
      setSuccess(true);
      setIsSubmitting(false);
      setTimeout(() => router.push("/organizer-dashboard"), 2000);
    } catch (error: any) {
      console.error("Submission Error:", error);
      setError(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠");
      setIsSubmitting(false);
    }
  };

  const formatAmount = (amount: number) => {
    return new Intl.NumberFormat("th-TH").format(amount);
  };

  const getOrganizationTypeLabel = (type: string) => {
    return organizationTypes.find((t) => t.value === type)?.label || type;
  };

  const getCategoryLabel = (category: string) => {
    return categories.find((c) => c.value === category)?.label || category;
  };

  if (success) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md text-center">
          <CardContent className="p-8">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-2xl">‚úÖ</span>
            </div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h2>
            <p className="text-gray-600 mb-4">
              ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì{process.env.NEXT_PUBLIC_AUTO_APPROVE === 'true' ? '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : '‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß'}
            </p>
            <p className="text-sm text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£...</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50">
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" onClick={() => router.back()} className="hover:bg-pink-50">
              <ArrowLeft className="w-4 h-4 mr-2" />
              ‡∏Å‡∏•‡∏±‡∏ö
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-gray-800">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ</h1>
              <p className="text-sm text-gray-600">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÉ‡∏´‡∏°‡πà</p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto p-4">
        <form onSubmit={handleSubmit} className="space-y-6">
          {error && (
            <Alert className="border-red-200 bg-red-50">
              <AlertDescription className="text-red-700">
                {error.includes("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á") ? (
                  <>
                    <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:</p>
                    <ul className="list-disc pl-5">
                      {error.split(": ")[1]?.split(", ").map((msg, index) => (
                        <li key={index}>{msg}</li>
                      ))}
                    </ul>
                  </>
                ) : (
                  error
                )}
              </AlertDescription>
            </Alert>
          )}

          <div className="grid gap-6 lg:grid-cols-3">
            <div className="lg:col-span-2 space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="title">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏≥‡∏Ç‡∏≠ *</Label>
                    <Input
                      id="title"
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢"
                      value={formData.title}
                      onChange={(e) => handleInputChange("title", e.target.value)}
                      required
                    />
                    {!formData.title && <p className="text-xs text-red-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</p>}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="description">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î *</Label>
                    <Textarea
                      id="description"
                      placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠..."
                      rows={6}
                      value={formData.description}
                      onChange={(e) => handleInputChange("description", e.target.value)}
                      required
                    />
                    <p className="text-xs text-gray-500">‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå</p>
                    {!formData.description && <p className="text-xs text-red-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</p>}
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="category">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà *</Label>
                      <Select
                        value={formData.category}
                        onValueChange={(value) => handleInputChange("category", value)}
                        disabled={categories.length === 0}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder={categories.length === 0 ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà..." : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"} />
                        </SelectTrigger>
                        <SelectContent>
                          {categories.map((category) => (
                            <SelectItem key={category.id} value={category.value}>
                              <div className="flex items-center gap-2">
                                <span>{category.icon}</span>
                                <span>{category.label}</span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      {categories.length === 0 && (
                        <p className="text-xs text-yellow-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</p>
                      )}
                      {!formData.category && categories.length > 0 && (
                        <p className="text-xs text-red-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</p>
                      )}
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="urgency">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô *</Label>
                      <Select
                        value={formData.urgency || "MEDIUM"}
                        onValueChange={(value) => handleInputChange("urgency", value)}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="LOW">‡∏ï‡πà‡∏≥</SelectItem>
                          <SelectItem value="MEDIUM">‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</SelectItem>
                          <SelectItem value="HIGH">‡∏™‡∏π‡∏á</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="organizationType">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ *</Label>
                    <Select
                      value={formData.organizationDetails.organizationType}
                      onValueChange={(value) => handleInputChange("organizationDetails.organizationType", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£" />
                      </SelectTrigger>
                      <SelectContent>
                        {organizationTypes.map((type) => (
                          <SelectItem key={type.value} value={type.value}>
                            <div className="flex items-center gap-2">
                              <span>{type.icon}</span>
                              <span>{type.label}</span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {!formData.organizationDetails.organizationType && (
                      <p className="text-xs text-red-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="image">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö</Label>
                    <div
                      className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:bg-gray-50"
                      onClick={() => fileInputRef.current?.click()}
                      onDragOver={(e) => e.preventDefault()}
                      onDrop={(e) => {
                        e.preventDefault();
                        const file = e.dataTransfer.files?.[0];
                        if (file) {
                          if (file.size > 5 * 1024 * 1024) {
                            setError("‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB");
                            return;
                          }
                          if (!["image/jpeg", "image/png"].includes(file.type)) {
                            setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå JPG ‡∏´‡∏£‡∏∑‡∏≠ PNG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
                            return;
                          }
                          setFormData({ ...formData, image: file });
                        }
                      }}
                    >
                      <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                      <p className="text-sm text-gray-600">‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á</p>
                      <p className="text-xs text-gray-500 mt-1">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JPG, PNG ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB</p>
                      <Input
                        id="image"
                        type="file"
                        accept="image/jpeg,image/png"
                        ref={fileInputRef}
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) {
                            if (file.size > 5 * 1024 * 1024) {
                              setError("‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB");
                              return;
                            }
                            if (!["image/jpeg", "image/png"].includes(file.type)) {
                              setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå JPG ‡∏´‡∏£‡∏∑‡∏≠ PNG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
                              return;
                            }
                            setFormData({ ...formData, image: file });
                          }
                        }}
                        className="hidden"
                      />
                    </div>
                    {formData.image && (
                      <div className="mt-2">
                        <p className="text-sm text-gray-600">‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {formData.image.name}</p>
                        <img
                          src={URL.createObjectURL(formData.image)}
                          alt="Preview"
                          className="mt-2 max-w-full h-auto rounded-lg"
                          style={{ maxHeight: "200px" }}
                        />
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ *</CardTitle>
                      <p className="text-sm text-gray-600 mt-1">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)</p>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={handleSelectAllDonationTypes}
                        className="text-xs bg-transparent"
                      >
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                      </Button>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={handleClearAllDonationTypes}
                        className="text-xs bg-transparent"
                      >
                        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid gap-4">
                    {donationTypes.map((type) => (
                      <div
                        key={type.value}
                        className={`border rounded-lg p-4 cursor-pointer transition-all ${
                          formData.donationType.includes(type.value)
                            ? `${type.color} border-2`
                            : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                        }`}
                        onClick={() => handleDonationTypeToggle(type.value)}
                      >
                        <div className="flex items-start gap-3">
                          <div className="mt-1">
                            {formData.donationType.includes(type.value) ? (
                              <CheckCircle2 className="w-5 h-5 text-green-600" />
                            ) : (
                              <Circle className="w-5 h-5 text-gray-400" />
                            )}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <span className="text-xl">{type.icon}</span>
                              <h4 className="font-semibold text-gray-800">{type.label}</h4>
                            </div>
                            <p className="text-sm text-gray-600 mb-2">{type.description}</p>
                            <div className="flex flex-wrap gap-1">
                              {type.examples.map((example, index) => (
                                <span
                                  key={index}
                                  className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full"
                                >
                                  {example}
                                </span>
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  {formData.donationType.includes("money") && (
                    <div className="space-y-4 p-4 bg-green-50 rounded-lg border border-green-200">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-lg">üí∞</span>
                        <h4 className="font-semibold text-green-800">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ</h4>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="goalAmount">‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó) *</Label>
                        <Input
                          id="goalAmount"
                          type="number"
                          placeholder="50000"
                          min="1000"
                          value={formData.goalAmount || ""}
                          onChange={(e) => handleInputChange("goalAmount", Number.parseInt(e.target.value) || 0)}
                          required
                        />
                        <p className="text-xs text-green-700">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1,000 ‡∏ö‡∏≤‡∏ó</p>
                      </div>
                    </div>
                  )}

                  {formData.donationType.includes("items") && (
                    <div className="space-y-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-lg">üì¶</span>
                        <h4 className="font-semibold text-blue-800">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h4>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="goalItems">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ *</Label>
                        <Textarea
                          id="goalItems"
                          placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 100 ‡πÄ‡∏•‡πà‡∏°, ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô 50 ‡∏ä‡∏∏‡∏î, ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏µ‡∏¨‡∏≤ (‡∏•‡∏π‡∏Å‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏• 5 ‡∏•‡∏π‡∏Å, ‡∏ï‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏• 2 ‡∏ú‡∏∑‡∏ô)"
                          rows={4}
                          value={formData.goalItems}
                          onChange={(e) => handleInputChange("goalItems", e.target.value)}
                          required
                        />
                        <p className="text-xs text-blue-700">‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</p>
                      </div>
                    </div>
                  )}

                  {formData.donationType.includes("volunteer") && (
                    <div className="space-y-4 p-4 bg-purple-50 rounded-lg border border-purple-200">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-lg">ü§ù</span>
                        <h4 className="font-semibold text-purple-800">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h4>
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="goalVolunteers">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (‡∏Ñ‡∏ô) *</Label>
                          <Input
                            id="goalVolunteers"
                            type="number"
                            placeholder="10"
                            min="1"
                            value={formData.goalVolunteers || ""}
                            onChange={(e) => handleInputChange("goalVolunteers", Number.parseInt(e.target.value) || 0)}
                            required
                          />
                        </div>
                        <div className="space-y-2">
                          <Label>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ *</Label>
                          <Select
                            value={formData.volunteerDuration}
                            onValueChange={(value) => handleInputChange("volunteerDuration", value)}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="1day">1 ‡∏ß‡∏±‡∏ô</SelectItem>
                              <SelectItem value="weekend">‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</SelectItem>
                              <SelectItem value="1week">1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</SelectItem>
                              <SelectItem value="1month">1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</SelectItem>
                              <SelectItem value="ongoing">‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="volunteerDetails">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ *</Label>
                        <Textarea
                          id="volunteerDetails"
                          placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå), ‡∏™‡∏≠‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πá‡∏Å (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô), ‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏à‡∏£‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£), ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"
                          rows={4}
                          value={formData.volunteerDetails}
                          onChange={(e) => handleInputChange("volunteerDetails", e.target.value)}
                          required
                        />
                        <p className="text-xs text-purple-700">‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πà‡∏≤‡∏á‡πÜ</p>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Building className="w-5 h-5 text-blue-500" />
                    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="registrationNumber">‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ *</Label>
                      <Input
                        id="registrationNumber"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 0123456789012"
                        value={formData.organizationDetails.registrationNumber}
                        onChange={(e) => handleInputChange("organizationDetails.registrationNumber", e.target.value)}
                        required
                      />
                      {!formData.organizationDetails.registrationNumber && (
                        <p className="text-xs text-red-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£</p>
                      )}
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="taxId">‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ</Label>
                      <Input
                        id="taxId"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô 0123456789012"
                        value={formData.organizationDetails.taxId}
                        onChange={(e) => handleInputChange("organizationDetails.taxId", e.target.value)}
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MapPin className="w-5 h-5 text-pink-500" />
                    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="location">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà *</Label>
                    <Input
                      id="location"
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà"
                      value={formData.location}
                      onChange={(e) => handleInputChange("location", e.target.value)}
                      required
                    />
                    {!formData.location && <p className="text-xs text-red-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</p>}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="detailedAddress">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</Label>
                    <Textarea
                      id="detailedAddress"
                      placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ï‡πá‡∏° ‡∏£‡∏ß‡∏°‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
                      rows={3}
                      value={formData.detailedAddress}
                      onChange={(e) => handleInputChange("detailedAddress", e.target.value)}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="contactPhone">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ *</Label>
                    <div className="relative">
                      <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        id="contactPhone"
                        type="tel"
                        placeholder="081-234-5678"
                        className="pl-10"
                        value={formData.contactPhone}
                        onChange={(e) => handleInputChange("contactPhone", e.target.value)}
                        required
                      />
                      {!formData.contactPhone && <p className="text-xs text-red-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</p>}
                    </div>
                  </div>
                </CardContent>
              </Card>

              {formData.donationType.includes("money") && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <CreditCard className="w-5 h-5 text-green-500" />
                      ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
                    </CardTitle>
                    <p className="text-sm text-gray-600">‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ</p>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="bank">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ *</Label>
                      <Select
                        value={formData.bankAccount.bank}
                        onValueChange={(value) => handleInputChange("bankAccount.bank", value)}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢</SelectItem>
                          <SelectItem value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå</SelectItem>
                          <SelectItem value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û</SelectItem>
                          <SelectItem value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢</SelectItem>
                          <SelectItem value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï</SelectItem>
                        </SelectContent>
                      </Select>
                      {!formData.bankAccount.bank && formData.donationType.includes("money") && (
                        <p className="text-xs text-red-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</p>
                      )}
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="accountNumber">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ *</Label>
                      <Input
                        id="accountNumber"
                        placeholder="123-4-56789-0"
                        value={formData.bankAccount.accountNumber}
                        onChange={(e) => handleInputChange("bankAccount.accountNumber", e.target.value)}
                        required
                      />
                      {!formData.bankAccount.accountNumber && formData.donationType.includes("money") && (
                        <p className="text-xs text-red-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</p>
                      )}
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="accountName">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ *</Label>
                      <Input
                        id="accountName"
                        placeholder="‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ"
                        value={formData.bankAccount.accountName}
                        onChange={(e) => handleInputChange("bankAccount.accountName", e.target.value)}
                        required
                      />
                      {!formData.bankAccount.accountName && formData.donationType.includes("money") && (
                        <p className="text-xs text-red-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</p>
                      )}
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>

            <div className="space-y-6">
              <Card className="lg:sticky lg:top-4 max-h-[calc(100vh-2rem)] overflow-y-auto">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Eye className="w-5 h-5 text-blue-500" />
                    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3 mb-4">
                    <Button
                      type="submit"
                      className="w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600"
                      disabled={isSubmitting || categories.length === 0}
                    >
                      {isSubmitting ? (
                        <>
                          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠...
                        </>
                      ) : (
                        <>
                          <Save className="w-4 h-4 mr-2" />
                          ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ
                        </>
                      )}
                    </Button>

                    <Button
                      type="button"
                      variant="outline"
                      className="w-full bg-transparent"
                      onClick={handleSaveDraft}
                      disabled={isSubmitting || categories.length === 0}
                    >
                      {isSubmitting ? (
                        <>
                          <div className="w-4 h-4 border-2 border-gray-500 border-t-transparent rounded-full animate-spin mr-2" />
                          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πà‡∏≤‡∏á...
                        </>
                      ) : (
                        <>
                          <Save className="w-4 h-4 mr-2" />
                          ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πà‡∏≤‡∏á
                        </>
                      )}
                    </Button>
                  </div>

                  <div className="aspect-video bg-gray-100 rounded-lg flex items-center justify-center">
                    {formData.image ? (
                      <img
                        src={URL.createObjectURL(formData.image)}
                        alt="Preview"
                        className="w-full h-full object-cover rounded-lg"
                      />
                    ) : (
                      <span className="text-gray-400">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö</span>
                    )}
                  </div>

                  <div>
                    <h3 className="font-bold text-gray-800 line-clamp-2">{formData.title || "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ"}</h3>
                    <p className="text-sm text-gray-600 mt-1 line-clamp-3">
                      {formData.description || "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ..."}
                    </p>
                  </div>

                  <div className="flex flex-wrap gap-2">
                    {formData.category && (
                      <span className="px-2 py-1 bg-pink-100 text-pink-700 text-xs rounded-full">
                        {getCategoryLabel(formData.category)}
                      </span>
                    )}
                    {formData.organizationDetails.organizationType && (
                      <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                        {getOrganizationTypeLabel(formData.organizationDetails.organizationType)}
                      </span>
                    )}
                  </div>

                  {formData.urgency && (
                    <div className="flex items-center gap-1 text-sm text-gray-500">
                      <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:</span>
                      <span>
                        {{
                          LOW: "‡∏ï‡πà‡∏≥",
                          MEDIUM: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
                          HIGH: "‡∏™‡∏π‡∏á",
                          URGENT: "‡∏î‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å",
                        }[formData.urgency] || formData.urgency}
                      </span>
                    </div>
                  )}

                  {formData.donationType.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-700">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ:</h4>
                      <div className="flex flex-wrap gap-1">
                        {formData.donationType.map((type) => {
                          const typeInfo = donationTypes.find((t) => t.value === type);
                          return (
                            <span
                              key={type}
                              className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full flex items-center gap-1"
                            >
                              <span>{typeInfo?.icon}</span>
                              <span>{typeInfo?.label}</span>
                            </span>
                          );
                        })}
                      </div>
                    </div>
                  )}

                  {formData.goalAmount && formData.goalAmount > 0 && (
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</span>
                        <span className="font-semibold">‡∏ø{formatAmount(formData.goalAmount)}</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div className="bg-pink-500 h-2 rounded-full w-0"></div>
                      </div>
                    </div>
                  )}

                  {formData.goalItems && (
                    <div className="space-y-1">
                      <span className="text-sm font-medium text-gray-700">‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:</span>
                      <p className="text-xs text-gray-600 line-clamp-2">{formData.goalItems}</p>
                    </div>
                  )}

                  {formData.goalVolunteers && formData.goalVolunteers > 0 && (
                    <div className="space-y-1">
                      <span className="text-sm font-medium text-gray-700">‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</span>
                      <p className="text-xs text-gray-600">{formData.goalVolunteers} ‡∏Ñ‡∏ô</p>
                      {formData.volunteerDetails && (
                        <p className="text-xs text-gray-500 line-clamp-2">{formData.volunteerDetails}</p>
                      )}
                      {formData.volunteerDuration && (
                        <p className="text-xs text-gray-500">
                          ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {
                            {
                              "1day": "1 ‡∏ß‡∏±‡∏ô",
                              "weekend": "‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
                              "1week": "1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
                              "1month": "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                              "ongoing": "‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á",
                            }[formData.volunteerDuration] || formData.volunteerDuration
                          }
                        </p>
                      )}
                    </div>
                  )}

                  {formData.location && (
                    <div className="flex items-center gap-1 text-sm text-gray-500">
                      <MapPin className="w-3 h-3" />
                      <span>{formData.location}</span>
                    </div>
                  )}

                  {(formData.detailedAddress || formData.contactPhone || formData.organizationDetails) && (
                    <div className="space-y-1">
                      <span className="text-sm font-medium text-gray-700">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</span>
                      {formData.detailedAddress && (
                        <p className="text-xs text-gray-600">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {formData.detailedAddress}</p>
                      )}
                      {formData.contactPhone && (
                        <p className="text-xs text-gray-600">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: {formData.contactPhone}</p>
                      )}
                      {formData.organizationDetails.organizationType && (
                        <p className="text-xs text-gray-600">
                          ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£: {getOrganizationTypeLabel(formData.organizationDetails.organizationType)}
                        </p>
                      )}
                      {formData.organizationDetails.registrationNumber && (
                        <p className="text-xs text-gray-600">
                          ‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: {formData.organizationDetails.registrationNumber}
                        </p>
                      )}
                    </div>
                  )}

                  <div className="text-xs text-gray-500">
                    <p>‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£: {user?.organizationName || `${user?.firstName} ${user?.lastName}`}</p>
                  </div>
                </CardContent>
              </Card>

              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="font-medium text-blue-800 mb-2">üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö</h4>
                <ul className="text-sm text-blue-700 space-y-1">
                  <li>‚Ä¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à</li>
                  <li>‚Ä¢ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</li>
                  <li>‚Ä¢ ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á</li>
                  <li>‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</li>
                  <li>‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô</li>
                </ul>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  );

  function handleSaveDraft() {
    setError("");
    setIsSubmitting(true);

    const requestData = {
      title: formData.title || "‡∏£‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠",
      description: formData.description || "‡∏£‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå",
      categoryId: categories.find(c => c.value === formData.category)?.id || formData.category || categories[0]?.id || "1",
      location: formData.location || null,
      urgency: formData.urgency || "MEDIUM",
      acceptsMoney: formData.donationType.includes("money"),
      acceptsItems: formData.donationType.includes("items"),
      acceptsVolunteer: formData.donationType.includes("volunteer"),
      targetAmount: formData.goalAmount ? Number(formData.goalAmount) : undefined,
      itemsNeeded: formData.goalItems ? formData.goalItems.split(",").map(item => item.trim()).filter(item => item) : [],
      volunteersNeeded: formData.goalVolunteers ? Number(formData.goalVolunteers) : 0,
      volunteerSkills: formData.volunteerDetails ? formData.volunteerDetails.split(",").map(skill => skill.trim()).filter(skill => skill) : [],
      volunteerDuration: formData.volunteerDuration || null,
      images: [],
      documents: {
        detailedAddress: formData.detailedAddress || null,
        contactPhone: formData.contactPhone || null,
        bankAccount: formData.donationType.includes("money") ? {
          bank: formData.bankAccount.bank,
          accountNumber: formData.bankAccount.accountNumber,
          accountName: formData.bankAccount.accountName,
        } : undefined,
        organizationDetails: {
          organizationType: formData.organizationDetails.organizationType === "school" ? "OTHER" : formData.organizationDetails.organizationType || undefined,
          registrationNumber: formData.organizationDetails.registrationNumber || undefined,
          taxId: formData.organizationDetails.taxId || null,
        },
      },
      status: "DRAFT",
    };

    try {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πà‡∏≤‡∏á");
        setIsSubmitting(false);
        return;
      }

      fetch("/api/donation-requests", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(requestData),
      })
        .then(async (response) => {
          const responseData = await response.json();
          console.log("Draft API Response:", responseData);
          if (!response.ok) {
            if (responseData.details) {
              const errorMessages = responseData.details
                .map((e: any) => e.message)
                .join(", ");
              throw new Error(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${errorMessages}`);
            }
            if (responseData.error.includes("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")) {
              throw new Error("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà");
            }
            throw new Error(responseData.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ");
          }
          console.log("Draft request ID:", responseData.id);
          setSuccess(true);
          setIsSubmitting(false);
          setTimeout(() => router.push("/organizer-dashboard"), 2000);
        })
        .catch((error: any) => {
          console.error("Save Draft Error:", error);
          setError(error.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ");
          setIsSubmitting(false);
        });
    } catch (error: any) {
      console.error("Save Draft Error:", error);
      setError(error.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ");
      setIsSubmitting(false);
    }
  }
}