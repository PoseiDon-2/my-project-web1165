"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Eye, EyeOff, Mail, Lock, User, Phone, ArrowLeft, Upload, FileText, CheckCircle, Heart } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useAuth } from "../../components/auth-context"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Progress } from "@/components/ui/progress"
import { Checkbox } from "@/components/ui/checkbox"
import { Combobox } from "@/components/ui/combobox"

type RegistrationStep = "info" | "interests" | "documents" | "otp" | "success"

type Organization = {
  id: string
  name: string
  type: string
}

const generalInterests = [
  {
    id: "disaster-relief",
    label: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥",
    description: "‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß ‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ ‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏á",
    icon: "üåä",
    category: "disaster",
  },
  {
    id: "medical-health",
    label: "‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
    description: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤",
    icon: "üè•",
    category: "medical",
  },
  {
    id: "education-learning",
    label: "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ",
    description: "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ ‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    icon: "üìö",
    category: "education",
  },
  {
    id: "animal-welfare",
    label: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ï‡∏ß‡πå",
    description: "‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏à‡∏£‡∏à‡∏±‡∏î ‡πÅ‡∏°‡∏ß‡∏à‡∏£‡∏à‡∏±‡∏î ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡πà‡∏≤",
    icon: "üêï",
    category: "animal",
  },
  {
    id: "environment",
    label: "‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°",
    description: "‡∏õ‡∏•‡∏π‡∏Å‡∏õ‡πà‡∏≤ ‡∏•‡∏î‡∏Ç‡∏¢‡∏∞ ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏∞‡∏≠‡∏≤‡∏î",
    icon: "üå±",
    category: "environment",
  },
  {
    id: "elderly-care",
    label: "‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏",
    description: "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡∏Ñ‡∏ô‡∏ä‡∏£‡∏≤ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏",
    icon: "üë¥",
    category: "elderly",
  },
  {
    id: "children-youth",
    label: "‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏¢‡∏≤‡∏ß‡∏ä‡∏ô",
    description: "‡∏™‡∏ñ‡∏≤‡∏ô‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏î‡πá‡∏Å‡∏Å‡∏≥‡∏û‡∏£‡πâ‡∏≤ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡πá‡∏Å",
    icon: "üë∂",
    category: "children",
  },
  {
    id: "disability-support",
    label: "‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£",
    description: "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
    icon: "‚ôø",
    category: "disability",
  },
  {
    id: "community-development",
    label: "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ä‡∏∏‡∏°‡∏ä‡∏ô",
    description: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏°‡∏ä‡∏ô ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ",
    icon: "üèòÔ∏è",
    category: "community",
  },
  {
    id: "religious-spiritual",
    label: "‡∏®‡∏≤‡∏™‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì",
    description: "‡∏ß‡∏±‡∏î ‡πÇ‡∏ö‡∏™‡∏ñ‡πå ‡∏°‡∏±‡∏™‡∏¢‡∏¥‡∏î ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ô‡∏≤",
    icon: "üôè",
    category: "religion",
  },
  {
    id: "arts-culture",
    label: "‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°",
    description: "‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á ‡∏î‡∏ô‡∏ï‡∏£‡∏µ ‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°",
    icon: "üé®",
    category: "arts",
  },
  {
    id: "sports-recreation",
    label: "‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏≤‡∏£",
    description: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏µ‡∏¨‡∏≤ ‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏î‡πá‡∏Å‡πÄ‡∏•‡πà‡∏ô",
    icon: "‚öΩ",
    category: "sports",
  },
]

const organizationTypes = [
  { value: "NGO", label: "‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏ß‡∏á‡∏´‡∏≤‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£", icon: "üåü" },
  { value: "CHARITY", label: "‡∏Å‡∏≤‡∏£‡∏Å‡∏∏‡∏®‡∏•", icon: "ü§ù" },
  { value: "FOUNDATION", label: "‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ò‡∏¥", icon: "üèõÔ∏è" },
  { value: "GOVERNMENT", label: "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", icon: "üèõÔ∏è" },
  { value: "TEMPLE", label: "‡∏ß‡∏±‡∏î/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", icon: "üèõÔ∏è" },
  { value: "OTHER", label: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ", icon: "üìå" },
]

export default function Register() {
  const router = useRouter()
  const { register, sendOTP, verifyOTP, isLoading } = useAuth()
  const [currentStep, setCurrentStep] = useState<RegistrationStep>("info")
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    confirmPassword: "",
    firstName: "",
    lastName: "",
    phone: "",
    role: "user" as "DONOR" | "ORGANIZER",
    organizationId: "",
    newOrganizationName: "",
    organizationType: "",
    registrationNumber: "",
    templeId: "",
    interests: [] as string[],
    documents: {
      idCard: null as File | null,
      organizationCert: null as File | null,
    },
  })
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [error, setError] = useState("")
  const [otpCode, setOtpCode] = useState("")
  const [otpSent, setOtpSent] = useState(false)
  const [organizations, setOrganizations] = useState<Organization[]>([])
  const [isLoadingOrganizations, setIsLoadingOrganizations] = useState(false)

  useEffect(() => {
    if (formData.role === "ORGANIZER") {
      const fetchOrganizations = async () => {
        setIsLoadingOrganizations(true)
        try {
          const response = await fetch("/api/organizations")
          if (!response.ok) throw new Error("Failed to fetch organizations")
          const data = await response.json()
          setOrganizations(data)
        } catch (err) {
          setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        } finally {
          setIsLoadingOrganizations(false)
        }
      }
      fetchOrganizations()
    }
  }, [formData.role])

  const getStepProgress = () => {
    const userSteps = ["info", "interests", "otp", "success"]
    const organizerSteps = ["info", "documents", "otp", "success"]
    const steps = formData.role === "ORGANIZER" ? organizerSteps : userSteps
    return ((steps.indexOf(currentStep) + 1) / steps.length) * 100
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")

    if (currentStep === "info") {
      if (!formData.email || !formData.password || !formData.firstName || !formData.lastName || !formData.phone) {
        setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        return
      }

      if (formData.password !== formData.confirmPassword) {
        setError("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
        return
      }

      if (formData.password.length < 6) {
        setError("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
        return
      }

      const phoneRegex = /^[0-9-]+$/
      if (!phoneRegex.test(formData.phone)) {
        setError("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ -")
        return
      }

      if (formData.role === "ORGANIZER") {
        if (!formData.organizationId && !formData.newOrganizationName) {
          setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÉ‡∏´‡∏°‡πà")
          return
        }
        if (!formData.organizationType) {
          setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£")
          return
        }
        if (formData.organizationId === "other" && !formData.newOrganizationName) {
          setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÉ‡∏´‡∏°‡πà")
          return
        }
        if (formData.organizationType === "TEMPLE" && !formData.templeId) {
          setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ß‡∏±‡∏î")
          return
        }
        if (
          ["NGO", "CHARITY", "FOUNDATION", "GOVERNMENT"].includes(formData.organizationType) &&
          !formData.registrationNumber
        ) {
          setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
          return
        }
        // Validate templeId (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        if (formData.templeId && !/^\d+$/.test(formData.templeId)) {
          setError("‡πÄ‡∏•‡∏Ç‡∏ß‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
          return
        }
        // Validate registrationNumber (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 13 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•)
        if (formData.registrationNumber && !/^\d{13}$/.test(formData.registrationNumber)) {
          setError("‡πÄ‡∏•‡∏Ç‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 13 ‡∏´‡∏•‡∏±‡∏Å")
          return
        }
        setCurrentStep("documents")
      } else {
        setCurrentStep("interests")
      }
    } else if (currentStep === "interests") {
      if (formData.interests.length === 0) {
        setError("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô")
      }
      await handleSendOTP()
    } else if (currentStep === "documents") {
      if (!formData.documents.idCard || !formData.documents.organizationCert) {
        setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£")
        return
      }
      await handleSendOTP()
    } else if (currentStep === "otp") {
      await handleVerifyOTP()
    }
  }

  const handleSendOTP = async () => {
    try {
      const { success, message } = await sendOTP(formData.email);
      if (success) {
        setOtpSent(true);
        setCurrentStep("otp");
        setError("");
      } else {
        setError(message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á OTP ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
      }
    } catch (err) {
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
    }
  };

  const handleVerifyOTP = async () => {
    if (!otpCode || otpCode.length !== 6) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP 6 ‡∏´‡∏•‡∏±‡∏Å");
      return;
    }
    try {
      const { success, message } = await verifyOTP(formData.email, otpCode);
      if (!success) {
        setError(message || "‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö");
        return;
      }
      const { success: registerSuccess, message: registerMessage } = await register({
        email: formData.email,
        password: formData.password,
        firstName: formData.firstName,
        lastName: formData.lastName,
        phone: formData.phone,
        role: formData.role,
        organizationId: formData.organizationId === "other" ? undefined : formData.organizationId,
        newOrganizationName: formData.organizationId === "other" ? formData.newOrganizationName : undefined,
        organizationType: formData.organizationType,
        registrationNumber: formData.registrationNumber || undefined,
        templeId: formData.templeId || undefined,
        interests: formData.interests,
        documents: formData.documents,
      });
      if (registerSuccess) {
        setCurrentStep("success");
        setTimeout(() => {
          router.push("/profile");
        }, 3000);
      } else {
        setError(registerMessage || "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } catch (err: any) {
      setError(err.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å");
    }
  };

  const handleInputChange = (name: string, value: string) => {
    setFormData({
      ...formData,
      [name]: value,
    })
  }

  const handleInterestChange = (interestId: string, checked: boolean) => {
    setFormData((prev) => ({
      ...prev,
      interests: checked
        ? [...new Set([...prev.interests, interestId])]
        : prev.interests.filter((id) => id !== interestId),
    }))
  }

  const handleFileUpload = (type: "idCard" | "organizationCert", file: File | null) => {
    if (file && file.size > 5 * 1024 * 1024) {
      setError("‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB")
      return
    }
    if (file && !["application/pdf", "image/jpeg", "image/png"].includes(file.type)) {
      setError("‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô PDF, JPG ‡∏´‡∏£‡∏∑‡∏≠ PNG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
      return
    }
    setFormData({
      ...formData,
      documents: {
        ...formData.documents,
        [type]: file,
      },
    })
  }

  const handleBack = () => {
    if (currentStep === "interests") {
      setCurrentStep("info")
    } else if (currentStep === "documents") {
      setCurrentStep("info")
    } else if (currentStep === "otp") {
      if (formData.role === "ORGANIZER") {
        setCurrentStep("documents")
      } else {
        setCurrentStep("interests")
      }
    }
  }

  if (currentStep === "success") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md text-center">
          <CardContent className="p-8">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <CheckCircle className="w-8 h-8 text-green-600" />
            </div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h2>
            <p className="text-gray-600 mb-4">
              {formData.role === "ORGANIZER" ? "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£" : "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà DonateSwipe"}
            </p>
            <p className="text-sm text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå...</p>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
          <Button
            variant="ghost"
            onClick={() => (currentStep === "info" ? router.push("/login") : handleBack())}
            className="absolute top-4 left-4 hover:bg-pink-50"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            ‡∏Å‡∏•‡∏±‡∏ö
          </Button>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">üíù DonateSwipe</h1>
          <p className="text-gray-600">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô</p>
        </div>

        <Card className="shadow-xl border-0">
          <CardHeader className="text-center pb-4">
            <CardTitle className="text-2xl font-bold text-gray-800">
              {currentStep === "info" && "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"}
              {currentStep === "interests" && "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"}
              {currentStep === "documents" && "‡πÅ‡∏ô‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"}
              {currentStep === "otp" && "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•"}
            </CardTitle>
            <div className="mt-4">
              <Progress value={getStepProgress()} className="h-2" />
              <p className="text-sm text-gray-500 mt-2">
                ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà{" "}
                {formData.role === "ORGANIZER"
                  ? ["info", "documents", "otp"].indexOf(currentStep) + 1
                  : ["info", "interests", "otp"].indexOf(currentStep) + 1}{" "}
                ‡∏à‡∏≤‡∏Å {formData.role === "ORGANIZER" ? "3" : "3"}
              </p>
            </div>
          </CardHeader>

          <CardContent className="space-y-6">
            <form onSubmit={handleSubmit} className="space-y-4">
              {error && (
                <Alert className="border-red-200 bg-red-50">
                  <AlertDescription className="text-red-700">{error}</AlertDescription>
                </Alert>
              )}

              {currentStep === "info" && (
                <>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="firstName" className="text-gray-700">
                        ‡∏ä‡∏∑‡πà‡∏≠ *
                      </Label>
                      <div className="relative">
                        <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                        <Input
                          id="firstName"
                          name="firstName"
                          type="text"
                          placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                          value={formData.firstName}
                          onChange={(e) => handleInputChange(e.target.name, e.target.value)}
                          className="pl-10"
                          required
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="lastName" className="text-gray-700">
                        ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *
                      </Label>
                      <Input
                        id="lastName"
                        name="lastName"
                        type="text"
                        placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                        value={formData.lastName}
                        onChange={(e) => handleInputChange(e.target.name, e.target.value)}
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="email" className="text-gray-700">
                      ‡∏≠‡∏µ‡πÄ‡∏°‡∏• *
                    </Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                        value={formData.email}
                        onChange={(e) => handleInputChange(e.target.name, e.target.value)}
                        className="pl-10"
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="phone" className="text-gray-700">
                      ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *
                    </Label>
                    <div className="relative">
                      <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        id="phone"
                        name="phone"
                        type="tel"
                        placeholder="081-234-5678"
                        value={formData.phone}
                        onChange={(e) => handleInputChange(e.target.name, e.target.value)}
                        className="pl-10"
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="role" className="text-gray-700">
                      ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ *
                    </Label>
                    <Select
                      value={formData.role}
                      onValueChange={(value: "user" | "ORGANIZER") => {
                        setFormData({
                          ...formData,
                          role: value === "user" ? "DONOR" : "ORGANIZER",
                          organizationId: "",
                          newOrganizationName: "",
                          organizationType: "",
                          registrationNumber: "",
                          templeId: "",
                        })
                      }}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="user">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</SelectItem>
                        <SelectItem value="ORGANIZER">‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {formData.role === "ORGANIZER" && (
                    <>
                      <div className="space-y-2">
                        <Label htmlFor="organizationId" className="text-gray-700">
                          ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ *
                        </Label>
                        <Combobox
                          options={[
                            ...organizations.map((org) => ({
                              value: org.id,
                              label: `${org.name} (${org.type})`,
                            })),
                            { value: "other", label: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà)" },
                          ]}
                          value={formData.organizationId}
                          onChange={(value) => {
                            setFormData({
                              ...formData,
                              organizationId: value,
                              newOrganizationName: value === "other" ? formData.newOrganizationName : "",
                            })
                          }}
                          placeholder={isLoadingOrganizations ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£..." : "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£..."}
                          disabled={isLoadingOrganizations}
                        />
                      </div>

                      {formData.organizationId === "other" && (
                        <div className="space-y-2">
                          <Label htmlFor="newOrganizationName" className="text-gray-700">
                            ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÉ‡∏´‡∏°‡πà *
                          </Label>
                          <Input
                            id="newOrganizationName"
                            name="newOrganizationName"
                            type="text"
                            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ò‡∏¥‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡πâ‡∏≥‡πÉ‡∏à"
                            value={formData.newOrganizationName}
                            onChange={(e) => handleInputChange(e.target.name, e.target.value)}
                            required
                          />
                        </div>
                      )}

                      <div className="space-y-2">
                        <Label htmlFor="organizationType" className="text-gray-700">
                          ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ *
                        </Label>
                        <Select
                          value={formData.organizationType}
                          onValueChange={(value) => {
                            setFormData({
                              ...formData,
                              organizationType: value,
                              registrationNumber: "",
                              templeId: "",
                            })
                          }}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£" />
                          </SelectTrigger>
                          <SelectContent>
                            {organizationTypes.map((type) => (
                              <SelectItem key={type.value} value={type.value}>
                                <div className="flex items-center gap-2">
                                  <span>{type.icon}</span>
                                  <span>{type.label}</span>
                                </div>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      {formData.organizationType && formData.organizationType !== "TEMPLE" && (
                        <div className="space-y-2">
                          <Label htmlFor="registrationNumber" className="text-gray-700">
                            ‡πÄ‡∏•‡∏Ç‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• {formData.organizationType !== "OTHER" ? "*" : "(‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"}
                          </Label>
                          <Input
                            id="registrationNumber"
                            name="registrationNumber"
                            type="text"
                            placeholder="‡πÄ‡∏ä‡πà‡∏ô 0123456789012"
                            value={formData.registrationNumber}
                            onChange={(e) => handleInputChange(e.target.name, e.target.value)}
                            required={formData.organizationType !== "OTHER"}
                          />
                        </div>
                      )}

                      {formData.organizationType === "TEMPLE" && (
                        <div className="space-y-2">
                          <Label htmlFor="templeId" className="text-gray-700">
                            ‡πÄ‡∏•‡∏Ç‡∏ß‡∏±‡∏î *
                          </Label>
                          <Input
                            id="templeId"
                            name="templeId"
                            type="text"
                            placeholder="‡πÄ‡∏ä‡πà‡∏ô 123456"
                            value={formData.templeId}
                            onChange={(e) => handleInputChange(e.target.name, e.target.value)}
                            required
                          />
                        </div>
                      )}
                    </>
                  )}

                  <div className="space-y-2">
                    <Label htmlFor="password" className="text-gray-700">
                      ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô *
                    </Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        id="password"
                        name="password"
                        type={showPassword ? "text" : "password"}
                        placeholder="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                        value={formData.password}
                        onChange={(e) => handleInputChange(e.target.name, e.target.value)}
                        className="pl-10 pr-10"
                        required
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </Button>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword" className="text-gray-700">
                      ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô *
                    </Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        id="confirmPassword"
                        name="confirmPassword"
                        type={showConfirmPassword ? "text" : "password"}
                        placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                        value={formData.confirmPassword}
                        onChange={(e) => handleInputChange(e.target.name, e.target.value)}
                        className="pl-10 pr-10"
                        required
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      >
                        {showConfirmPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </Button>
                    </div>
                  </div>
                </>
              )}

              {currentStep === "interests" && (
                <>
                  <div className="space-y-4">
                    <div className="bg-pink-50 p-4 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <Heart className="w-5 h-5 text-pink-600" />
                        <h4 className="font-medium text-pink-800">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h4>
                      </div>
                      <p className="text-sm text-pink-700">
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì
                      </p>
                    </div>

                    <div className="grid grid-cols-1 gap-3 max-h-96 overflow-y-auto">
                      {generalInterests.map((interest) => (
                        <label
                          key={interest.id}
                          htmlFor={interest.id}
                          className={`block border rounded-lg p-4 cursor-pointer transition-all ${formData.interests.includes(interest.id)
                            ? "border-pink-300 bg-pink-50"
                            : "border-gray-200 hover:border-pink-200 hover:bg-pink-50"
                            }`}
                        >
                          <div className="flex items-start gap-3">
                            <Checkbox
                              id={interest.id}
                              checked={formData.interests.includes(interest.id)}
                              onCheckedChange={(checked) => handleInterestChange(interest.id, !!checked)}
                              className="mt-1"
                            />
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="text-lg">{interest.icon}</span>
                                <h5 className="font-medium text-gray-800">{interest.label}</h5>
                              </div>
                              <p className="text-sm text-gray-600">{interest.description}</p>
                            </div>
                          </div>
                        </label>
                      ))}
                    </div>

                    <div className="bg-blue-50 p-3 rounded-lg">
                      <p className="text-sm text-blue-700">
                        üí° <strong>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {formData.interests.length} ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</strong>
                        {formData.interests.length > 0 && " - ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á"}
                      </p>
                    </div>
                  </div>
                </>
              )}

              {currentStep === "documents" && (
                <>
                  <div className="space-y-4">
                    <div className="bg-blue-50 p-4 rounded-lg">
                      <h4 className="font-medium text-blue-800 mb-2">üìã ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö</h4>
                      <ul className="text-sm text-blue-700 space-y-1">
                        <li>‚Ä¢ ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</li>
                        <li>‚Ä¢ ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£</li>
                        <li>‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô PDF, JPG ‡∏´‡∏£‡∏∑‡∏≠ PNG ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB</li>
                      </ul>
                    </div>

                    <div className="space-y-2">
                      <Label className="text-gray-700">‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô *</Label>
                      <div className="border-2 border-dashed border-gray-300 rounded-lg p-4">
                        <input
                          type="file"
                          accept=".pdf,.jpg,.jpeg,.png"
                          onChange={(e) => handleFileUpload("idCard", e.target.files?.[0] || null)}
                          className="hidden"
                          id="idCard"
                        />
                        <label htmlFor="idCard" className="cursor-pointer">
                          <div className="text-center">
                            <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                            <p className="text-sm text-gray-600">
                              {formData.documents.idCard ? formData.documents.idCard.name : "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"}
                            </p>
                            <p className="text-xs text-gray-500 mt-1">PDF, JPG, PNG (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB)</p>
                          </div>
                        </label>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label className="text-gray-700">‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ *</Label>
                      <div className="border-2 border-dashed border-gray-300 rounded-lg p-4">
                        <input
                          type="file"
                          accept=".pdf,.jpg,.jpeg,.png"
                          onChange={(e) => handleFileUpload("organizationCert", e.target.files?.[0] || null)}
                          className="hidden"
                          id="organizationCert"
                        />
                        <label htmlFor="organizationCert" className="cursor-pointer">
                          <div className="text-center">
                            <FileText className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                            <p className="text-sm text-gray-600">
                              {formData.documents.organizationCert
                                ? formData.documents.organizationCert.name
                                : "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"}
                            </p>
                            <p className="text-xs text-gray-500 mt-1">PDF, JPG, PNG (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB)</p>
                          </div>
                        </label>
                      </div>
                    </div>
                  </div>
                </>
              )}

              {currentStep === "otp" && (
                <>
                  <div className="text-center space-y-4">
                    <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto">
                      <Mail className="w-8 h-8 text-blue-600" />
                    </div>
                    <div>
                      <h3 className="text-lg font-semibold text-gray-800">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
                      <p className="text-sm text-gray-600 mt-1">‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP 6 ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á</p>
                      <p className="text-sm font-medium text-gray-800">{formData.email}</p>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="otp" className="text-gray-700">
                        ‡∏£‡∏´‡∏±‡∏™ OTP *
                      </Label>
                      <Input
                        id="otp"
                        type="text"
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ 6 ‡∏´‡∏•‡∏±‡∏Å"
                        value={otpCode}
                        onChange={(e) => setOtpCode(e.target.value.replace(/\D/g, "").slice(0, 6))}
                        className="text-center text-lg tracking-widest"
                        maxLength={6}
                        required
                      />
                    </div>

                    <Button
                      type="button"
                      variant="link"
                      onClick={handleSendOTP}
                      className="text-pink-600 hover:text-pink-700"
                      disabled={isLoading}
                    >
                      ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà
                    </Button>
                  </div>
                </>
              )}

              <Button
                type="submit"
                className="w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...
                  </>
                ) : (
                  <>
                    {currentStep === "info" && (formData.role === "ORGANIZER" ? "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ" : "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")}
                    {currentStep === "interests" && "‡∏™‡πà‡∏á OTP"}
                    {currentStep === "documents" && "‡∏™‡πà‡∏á OTP"}
                    {currentStep === "otp" && "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"}
                  </>
                )}
              </Button>
            </form>

            {currentStep === "info" && (
              <div className="text-center">
                <p className="text-sm text-gray-600">
                  ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß?{" "}
                  <Button
                    variant="link"
                    onClick={() => router.push("/login")}
                    className="p-0 h-auto text-pink-600 hover:text-pink-700"
                  >
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                  </Button>
                </p>
              </div>
            )}

            {currentStep === "interests" && (
              <div className="text-center">
                <p className="text-xs text-gray-500">üí° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}