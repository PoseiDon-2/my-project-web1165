// prisma/seed.ts
import { user_role, user_status, DonationRequestStatus, Prisma } from '@prisma/client';
import { hash } from 'bcryptjs';
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();


async function main() {
    console.log('üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£ seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô...');

    try {
        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ foreign key ‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á category ‡∏Å‡πà‡∏≠‡∏ô
        await prisma.donationRequest.deleteMany();
        await prisma.userinterest.deleteMany();
        await prisma.relatedcategory.deleteMany();
        await prisma.interest.deleteMany();
        await prisma.category.deleteMany();
        await prisma.user.deleteMany({ where: { role: user_role.ADMIN } });
        await prisma.systemSettings.deleteMany();
        console.log('‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        const userCount = await prisma.user.count({ where: { role: user_role.ADMIN } });
        console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô admin ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö: ${userCount}`);

        // Seed Admin User
        const hashedPassword = await hash(process.env.ADMIN_PASSWORD || 'admin123', 10);
        const admin = {
            id: 'admin1',
            email: 'admin@example.com',
            password: hashedPassword,
            firstName: '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô',
            lastName: '‡∏£‡∏∞‡∏ö‡∏ö',
            role: user_role.ADMIN,
            status: user_status.ACTIVE,
            location: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
            latitude: 13.7563,
            longitude: 100.5018,
            organizationId: null,
            isEmailVerified: true,
            documentsVerified: true,
            createdAt: new Date(),
            updatedAt: new Date(),
        };

        await prisma.user.create({ data: admin });
        console.log(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${admin.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (email: ${admin.email})`);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
        const createdAdmin = await prisma.user.findFirst({
            where: { role: user_role.ADMIN },
            select: { id: true, email: true, role: true },
        });
        console.log('‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á:', createdAdmin);

        // Seed Categories
        const categories = [
            { id: 'cat1', name: '‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥' },
            { id: 'cat2', name: '‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå' },
            { id: 'cat3', name: '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤' },
        ];
        await prisma.category.createMany({ data: categories });
        console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

        // Seed Interests
        const interests = [
            { id: 'int1', label: '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥', description: '‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß', icon: 'üåä', category: '‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥' },
            { id: 'int2', label: '‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', description: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå', icon: 'üè•', category: '‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå' },
            { id: 'int3', label: '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ', description: '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤', icon: 'üìö', category: '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤' },
        ];
        await prisma.interest.createMany({ data: interests });
        console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

        // Seed RelatedCategory
        const relatedCategories = [
            { id: 'rc1', categoryId: 'cat1', relatedCategoryId: 'cat2', similarity: 0.6 },
            { id: 'rc2', categoryId: 'cat2', relatedCategoryId: 'cat3', similarity: 0.7 },
        ];
        await prisma.relatedcategory.createMany({ data: relatedCategories });
        console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

        // Seed System Settings
        const systemSettings = [
            { id: 'set1', key: 'max_donation_amount', value: '1000000' },
            { id: 'set2', key: 'min_volunteer_hours', value: '10' },
        ];
        await prisma.systemSettings.createMany({ data: systemSettings });
        console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

        // Seed DonationRequest
        const donationRequests = [
            {
                id: 'req10',
                title: '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏†‡∏±‡∏¢‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
                description: '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
                slug: 'flood-relief-2025',
                images: JSON.stringify(['/placeholder.svg?height=600&width=400']),
                categoryId: 'cat1',
                acceptsMoney: true,
                acceptsItems: true,
                acceptsVolunteer: true,
                targetAmount: new Prisma.Decimal(100000),
                currentAmount: new Prisma.Decimal(0),
                itemsNeeded: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏´‡πâ‡∏á, ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤, ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°',
                volunteerDetails: '‡∏ä‡πà‡∏ß‡∏¢‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏ö‡πâ‡∏≤‡∏ô, ‡∏Ç‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á',
                volunteersNeeded: 10,
                volunteersReceived: 0,
                location: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
                latitude: 13.7563,
                longitude: 100.5018,
                organizerId: 'admin1',
                status: DonationRequestStatus.APPROVED,
                createdAt: new Date(),
                expiresAt: new Date('2025-12-31'),
            },
        ];
        await prisma.donationRequest.createMany({ data: donationRequests });
        console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

        console.log('‚úÖ Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ seed:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

main().catch((e) => {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', e);
    process.exit(1);
});
